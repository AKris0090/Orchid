#version 460

struct Vertex {
	vec3 pos;
	vec2 tex;
	vec3 normal;
	vec4 tangent;
	vec3 biTangent;
	vec4 jointIndex;
	vec4 jointWeight;
}

layout(std430, set = 0, binding = 0) readonly buffer JointMatrices {
	mat4 jointMatrices[];
};

layout(std430, set = 0, binding = 1) readonly buffer VertexBuffer {
	Vertex verticesIn[];
};

layout(std430, set = 0, binding = 2) writeonly buffer VertexBuffer {
	Vertex verticesOut[];
};

layout (push_constant) uniform PushConstants
{
    uint jointMatricesStart;
    uint numVertices;
} pcs;

layout (local_size_x = 256, local_size_y = 1, local_size_z = 1) in;

mat4 getJointMatrix(int jointId) {
    return jointMatrices[pcs.jointMatricesStart + jointId];
}

void main()
{
    uint index = gl_GlobalInvocationID.x;
    if (index >= pcs.numVertices) {
        return;
    }

    SkinningDataType sd = pcs.skinningData.data[index];
    mat4 skinMatrix =
        sd.weights.x * getJointMatrix(sd.jointIds.x) +
        sd.weights.y * getJointMatrix(sd.jointIds.y) +
        sd.weights.z * getJointMatrix(sd.jointIds.z) +
        sd.weights.w * getJointMatrix(sd.jointIds.w);

    Vertex v = verticesIn[index];
    v.pos = vec3(skinMatrix * vec4(v.position, 1.0));
    v.normal = vec3(skinMatrix * vec4(v.normal,. 1.0));
    v.tangent = skinMatrix * tangent;

    verticesOut[index] = v;
}